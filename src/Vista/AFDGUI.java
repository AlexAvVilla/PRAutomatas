/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author Alex
 */
public class AFDGUI extends javax.swing.JFrame {

    /**
     * Creates new form VistaPrinci
     */
    
    public AFDGUI() {
        initComponents();
        

        // Definimos el AFD
        // ... (Mismo código del AFD definido anteriormente) ...

        // Configuramos el botón de verificación
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCadena = new javax.swing.JTextField();
        btnVerificar = new javax.swing.JButton();
        txtFinal = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Verificador de Cadenas");

        jLabel2.setText("Ingrese su Cadena:");

        txtCadena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCadenaActionPerformed(evt);
            }
        });

        btnVerificar.setText("Verificar");
        btnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtCadena, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(btnVerificar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(txtFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCadena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(btnVerificar)
                .addGap(43, 43, 43)
                .addComponent(txtFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCadenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCadenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCadenaActionPerformed

    private void btnVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarActionPerformed
        String cadena = this.txtCadena.getText();
        
        boolean contieneNumeros = false;
        boolean contieneLetras = false;

        for (char caracter : cadena.toCharArray()) {
            if (Character.isDigit(caracter)) {
                contieneNumeros = true;
            } else if (Character.isLetter(caracter)) {
                contieneLetras = true;
            }
        }

        if (contieneNumeros && contieneLetras) {
            this.txtFinal.setText("La cadena " + cadena +" es rechazada" + " por el AFD.");
        } else if (contieneNumeros) {
            boolean aceptada = aceptaCadena(cadena);
            this.txtFinal.setText("La cadena '" + cadena + "' " + (aceptada ? "es aceptada" : "es rechazada") + " por el AFD.");
        } else if (contieneLetras) {
            boolean aceptada = Cadena(cadena);
            this.txtFinal.setText("La cadena '" + cadena + "' " + (aceptada ? "es aceptada" : "es rechazada") + " por el AFD.");
        } else {
            this.txtFinal.setText("El campo no contiene ni números ni letras.");
        }
        
       //boolean aceptada = aceptaCadena(cadena);
       //this.txtFinal.setText("La cadena '" + cadena + "' " + (aceptada ? "es aceptada" : "es rechazada") + " por el AFD.");
    
    }//GEN-LAST:event_btnVerificarActionPerformed
    
    public boolean aceptaCadena(String cadena) {
        HashMap<String, HashMap<Character, String>> transiciones;
        String estadoInicial;
        String[] estadosAceptacion;
        
        String[] estados = {"q0", "q1", "q2"};
        // Definimos el alfabeto
        char[] alfabeto = {'0', '1','2', '3','4', '5','6', '7','8','9'};

        // Definimos la función de transición
        transiciones = new HashMap<>();
        transiciones.put("q0", new HashMap<>());
        transiciones.put("q1", new HashMap<>());
        transiciones.put("q2", new HashMap<>());
        
        transiciones.get("q0").put('0', "q2");
        transiciones.get("q0").put('1', "q2");
        transiciones.get("q0").put('2', "q2");
        transiciones.get("q0").put('3', "q2");
        transiciones.get("q0").put('4', "q2");
        transiciones.get("q0").put('5', "q2");
        transiciones.get("q0").put('6', "q2");
        transiciones.get("q0").put('7', "q2");
        transiciones.get("q0").put('8', "q2");
        transiciones.get("q0").put('9', "q2");

        transiciones.get("q2").put('0', "q2");
        transiciones.get("q2").put('1', "q2");
        transiciones.get("q2").put('2', "q2");
        transiciones.get("q2").put('3', "q2");
        transiciones.get("q2").put('4', "q2");
        transiciones.get("q2").put('5', "q2");
        transiciones.get("q2").put('6', "q2");
        transiciones.get("q2").put('7', "q2");
        transiciones.get("q2").put('8', "q2");
        transiciones.get("q2").put('9', "q2");

        // Definimos el estado inicial
        estadoInicial = "q0";

        // Definimos el conjunto de estados de aceptación
        estadosAceptacion = new String[]{"q2"};
        
        String estadoActual = estadoInicial;

        for (char simbolo : cadena.toCharArray()) {
            if (!transiciones.get(estadoActual).containsKey(simbolo)) {
                return false; // El símbolo no está en el alfabeto
            }
            estadoActual = transiciones.get(estadoActual).get(simbolo);
        }

        for (String estadoAceptacion : estadosAceptacion) {
            if (estadoActual.equals(estadoAceptacion)) {
                return true; // La cadena fue aceptada
            }
        }
        
        return false;
    }
    
    public boolean Cadena(String cadena) {
        HashMap<String, HashMap<Character, String>> transiciones;
        String estadoInicial;
        String[] estadosAceptacion;

        String[] estados = {"q0", "q1", "q2"};
        char[] alfabeto = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();

        transiciones = new HashMap<>();
        transiciones.put("q0", new HashMap<>());
        transiciones.put("q1", new HashMap<>());
        transiciones.put("q2", new HashMap<>());

        // Definimos las transiciones para letras (A-Z y a-z)
        for (char letra : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray()) {
            if (letra != 'L' && letra != 'C') {
                transiciones.get("q0").put(letra, "q1");
                transiciones.get("q1").put(letra, "q1");
                transiciones.get("q2").put(letra, "q2");
            } else {
                transiciones.get("q0").put(letra, "q1");
                transiciones.get("q1").put(letra, "q2");
                transiciones.get("q2").put(letra, "q2");
            }
        }

        estadoInicial = "q0";
        estadosAceptacion = new String[]{"q1", "q2"};

        String estadoActual = estadoInicial;
        Set<Character> caracteresEncontrados = new HashSet<>();

        boolean mayusculaEncontrada = false; // Variable para rastrear si se ha encontrado una letra mayúscula

        for (int i = 0; i < cadena.length(); i++) {
            char s = cadena.charAt(i);

            if (!transiciones.get(estadoActual).containsKey(s)) {
                return false; // El símbolo no está en el alfabeto
            }

            if (caracteresEncontrados.contains(s) && !(s == 'L' || s == 'C' || s == 'c' || s == 'l')) {
                return false; // No permitimos caracteres duplicados, excepto 'L' y 'C'
            }

            caracteresEncontrados.add(s);
            estadoActual = transiciones.get(estadoActual).get(s);

            // Verifica si se encuentra una letra mayúscula
            if (Character.isUpperCase(s)) {
                if (i == 0) {
                    mayusculaEncontrada = true;
                } else {
                    return false; // Se encontró una letra mayúscula en una posición no válida
                }
            }
        }

        for (String estadoAceptacion : estadosAceptacion) {
            if (estadoActual.equals(estadoAceptacion) && mayusculaEncontrada) {
                return true; // La cadena fue aceptada
            }
        }

        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AFDGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AFDGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AFDGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AFDGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AFDGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnVerificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JTextField txtCadena;
    public javax.swing.JTextField txtFinal;
    // End of variables declaration//GEN-END:variables
}
